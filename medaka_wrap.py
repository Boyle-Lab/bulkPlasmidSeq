import argparse
import os
import sys
import shutil
import subprocess

import bulkPlasmidSeq as main

def run(reads, reference, outputDir, args):
    '''
    Running Medaka, check that Porechop is false. Check the necessary inputs. Checks for use of -r vs -BC. 
    These two args take the same thing! A file or directory full of plasmids, the distiction is used for user clarity.
    '''
        
    if None not in (reads, reference, outputDir):
        runMedaka(reads, reference, outputDir, args.threads, args.screenshot, args.igv)
            
    elif args.barcodes is not None:
        print('Medaka does not use barcodes, running with the reference sequence provided, --barcodes will be ignored')
        
    else:
        sys.exit('Porechop needs input reads (-i), output directory (-o), and reference sequences (-r)')



def runMedaka(reads, reference, outputDir, threads, screenshot, igv):
    '''
    Takes the input reads, reference, and output directory (after being processed through loadReads) and runs Medaka.
    Please see Dependencies.txt or https://github.com/nanoporetech/medaka for more information about installing medaka.
    Only medaka_consensus used in this pipeline.
    '''
    
    print('----------------------------------\n')
    print('Checking Medaka Args')
    print('----------------------------------\n')
    print('Input files: %s \nReference Files: %s \nOutput directory: %s \nThreads: %s'
         % (reads, reference, outputDir, str(threads)))
    
    subprocess.run(['medaka_consensus -i %s -d %s -o %s -t %s -m r941_min_high_g344'
                    % (reads, reference, outputDir, str(threads))], shell = True)
    
    processMedakaOutput(outputDir, reference, screenshot, igv)
    
    return 


def processMedakaOutput(outputDir, reference, screenshot, igv = None):
    '''
    Splits the consensus.fasta file that was generated by Medaka into individual plasmid seqs.
    Processes calls_to_draft.bam to filter out supplemental alignments and make index of that. 
    '''
    if os.path.isdir(outputDir):
        filePath = outputDir+'/consensus.fasta'
        consensusFasta = file_object = open(filePath, 'rt')
        for line in consensusFasta:
            if line.startswith('>'):
                header = line.split(' ')[0]  
            else:
                seq = line
                out = open('%s/%s.fasta' % (outputDir, header[1:-1]), 'w')
                out.write('%s \n%s' % (header, seq))
    
    subprocess.run(['samtools view -bq 1 %s/calls_to_draft.bam > %s/final_processed.bam' %
                    (outputDir, outputDir)], shell = True)
    subprocess.run(['samtools index %s/final_processed.bam' % outputDir], shell = True)
    
                
    #Run take screenshots based on final_processed.bam    
    if screenshot:
        main.takeScreenshots(reference, outputDir, igv)     